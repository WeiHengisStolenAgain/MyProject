//http://speckyboy.com/demo/windmill-demo/index.html
require(

    [],
    function () {
            
        console.log("yo, I'm alive!");

        var paper = new Raphael(document.getElementById("mySVGCanvas"));
        // Set various variables to be used in the code
        var counter = 0;
        var pWidth = paper.canvas.offsetWidth;
        var pHeight = paper.canvas.offsetHeight;
        var movement = setInterval(moveSquare, 10)
        // Set a prompt box with instructions and to allow the user to select the level of difficulty 
        var difficulty = prompt("Welcome!\nThe objective is to click on the pacman as many times as possible withing 10 seconds. Please choose the desired difficuly level (the level of difficulty affects the movement speed of the pacman): \n1 (easy), 2 (medium) or 3 (hard).")
        console.log("Difficulty level is " + difficulty) // Print out the difficulty level onto the console and also to check if it works

        var backgroundSound = new Audio("resources/background.wav");
        backgroundSound.play();
        backgroundSound.loop = true;

        var clickSound = new Audio("resources/click.ogg");

        // Make a start button and text and define their attributes
        var startButton = paper.circle(300, 200, 40);
        var startText = paper.text(300, 200, 'START');
        startButton.attr({
            stroke: "black",
            fill: "white"
        });

        startText.attr({
            stroke: "black"
        })

        startButton.hide();
        startText.hide();

        // Show the start button and clear the movement of the square everytime the game ends
        var ready = function(){
            startButton.show();
            startText.show();
            clearInterval(movement);
        }

        // Define what happens once the game starts
        var start = function (){
            console.log("game is starting");
            startButton.hide(); // Hide the start button
            startText.hide();
            movement = setInterval(moveSquare, 10); // Start moving the square around randomly
            // Set the game to end in 10 seconds
            setTimeout(function(){
            confirm("Congratulations! You've completed " + counter + " clicks!"); // Notify the user about the number of successful clicks made on the square
            rect1.attr({
                x: -100, // Move the square offscreen after the game ends.
                y: -100
            });

            ready(); // Call the ready function to start a new game
        }, 10000);


            counter = 0; // Reset the counter to 0
        
        }

        // Call the start function everytime the start button is clicked
        startButton.node.addEventListener('click', start);

        // Create the square as well as its attributes
        var rect1 = paper.rect(-100,-100,75, 75);
        rect1.attr({
            'fill': 'url(http://lepslair.com/funbox/avatars/pacman80.gif)',
            'stroke': 'black',
            'stroke-width': 3,
            'stroke-linejoin': 'round',
        });


         var randInt = function( m, n ) {
            var range = n-m+1;
            var frand = Math.random()*range;
            return m+Math.floor(frand);
        }

        // Set the position and movement rate of the box
        rect1.xpos=225
        rect1.ypos=125
        rect1.xrate=1*difficulty // The rate of movement will be based on the level of difficulty selected
        rect1.yrate=1*difficulty

        // Set the function to move the square
        var moveSquare = function(){
            var randX, randY;
            var posX, posY;
            posX = randInt(4.5,6); // Identify random numbers to make the square move randomly
            posY = randInt(2.5,4);
            randX = Math.floor((Math.random()*75)+1) // Provide a wider variety of random numbers to allow the square to move with more freedom
            randY = Math.floor((Math.random()*50)+1)
 

            // Make the position of the square change according to the rate indicated above
            rect1.xpos += rect1.xrate 
            rect1.ypos += rect1.yrate 
            // Change the attributes of the square based on the values above
            rect1.attr({
                x: rect1.xpos,
                y: rect1.ypos
            });
            // Set restrictions to keep the square within the box, as well as to make it change direction randomly
            if (rect1.xpos > pWidth-75 || rect1.xpos > posX*100) {rect1.xrate = -rect1.xrate}; // Change direction if the square hits the border or if the square hits a random number generated by posX
            if (rect1.ypos > pHeight-75 || rect1.ypos > posY*100) {rect1.yrate = -rect1.yrate}; // Change direction if the square hits the border or if the square hits a random number generated by posY
            if (rect1.xpos < 0 || rect1.xpos < randX) {rect1.xrate = -rect1.xrate}; // Change direction if the square hits the border or if the square hits a random number generated by randX
            if (rect1.ypos < 0 || rect1.ypos < randY) {rect1.yrate = -rect1.yrate}; // Change direction if the square hits the border or if the square hits a random number generated by randY



        };    
        

        // Increase the counter everytime the user clicks on the square successfully
        rect1.node.addEventListener('click', function(ev){
            counter++;
            console.log("your click count is now " + counter);
            clickSound.play();
        });

  

        ready(); // Put the start button on the screen 


    });

